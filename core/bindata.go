package core

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _locales_en_json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x97\xcd\x4b\x2b\x49\x14\xc5\xf7\xfe\x15\x45\xd6\x22\x03\x33\x2b\x77\xce\x68\x16\x42\xc6\x40\x04\x91\xc7\xa3\xa9\x74\x97\x9d\x22\xdd\x55\xa1\x3e\x12\x82\xf8\xbf\xbf\x5b\xfd\x91\x88\xaf\xcf\xad\x3c\x17\x8a\x5d\xe7\x9e\xdf\xa9\x2f\xba\xaf\x3f\xae\x84\x78\xa7\x1f\x21\x66\xba\x9a\xdd\x8a\x99\x2c\x83\xde\xeb\xa0\x95\x9f\x5d\xf7\xe3\xc1\x49\xe3\x1b\x19\xb4\x35\xa9\xe0\xee\x5c\x40\xfa\xc7\xf5\x6f\x80\xaa\x72\xca\x43\xf7\xa0\x4e\x5a\xd7\xb2\xdc\x16\xc1\x16\x6a\xaf\x4c\x40\x84\x7f\xa9\x48\x04\x2b\x86\x22\x16\xb4\xb3\x3e\xcb\xe9\x6b\x26\x31\xa5\x35\x81\xf6\x03\x00\xfe\x1b\x54\x60\xdd\x2b\x07\x8c\xbd\x36\x69\xab\x64\x50\x45\xd0\xad\xf2\x85\x36\x41\xb9\xbd\x6c\x00\xe4\xfd\xfd\x66\x15\xa4\x0b\xf7\xe4\xf8\xf8\x10\x6f\xce\xb6\x62\x1c\x7b\x26\x00\x8d\xd1\xe2\x68\xe4\xc1\x54\xfd\x33\x4e\xcc\x86\xcd\x3f\xd3\x53\xe2\xd7\x84\xf3\xd8\x74\x8a\x6a\xa5\x46\xf0\x87\x4e\x03\xb6\x5d\x38\x16\x5e\xd3\xa6\x18\xd9\x2a\x00\x78\xb5\xd1\x89\x54\x94\x85\x04\x59\x37\xda\x20\xce\x8b\x6a\x4a\xdb\xaa\xb4\xaa\x63\x42\x1a\x75\xe8\xb0\x37\x62\xd9\x28\xe9\x49\x90\x5b\xfa\xa5\xfb\x92\x4a\xf9\xd2\xe9\xb5\x12\x87\x8d\x0c\xbd\x21\x15\x0b\xed\x85\x5c\xdb\x18\x84\x36\x22\x6c\x94\x90\x55\xab\x8d\xf6\x94\x95\x72\x6e\xc0\x1c\xb9\x1b\xff\xc0\xdc\xf4\xce\x58\xbc\x59\xd7\xca\x50\xa4\xb3\x4c\xd3\xc3\x57\xe6\x45\xa9\x6d\x25\x8f\x74\x74\xf4\xb0\xa0\x0b\xbc\xe9\xff\xbc\x1f\xc7\xd8\x43\xfc\x9a\xf5\xcd\x9c\x69\xfa\xc0\x65\xe6\xff\xf7\xed\x5f\xff\x2c\x17\xc8\xdd\x34\xf6\x50\x44\xb4\x87\xf3\x4e\x17\xd1\x0b\x6b\x84\xb7\xa5\x96\x0d\x9d\x6f\x38\x58\xb7\x05\x3b\xdb\xd8\xda\x02\x58\x27\x4d\x9a\x5a\xd5\xae\x95\x43\x93\x58\x0c\xea\xb4\x35\xed\x52\xf1\x28\x4d\x94\xee\x08\x00\xa3\xca\x00\xfc\xc6\xba\x90\x30\x18\xc1\xd9\xe7\x6a\xed\x70\xfe\xa8\x66\xf3\xa9\x10\x23\x38\xfb\x42\xba\x72\x83\xb6\xaf\xd3\xb2\xd9\x54\x86\x01\x9c\xfd\x6e\xe7\xe0\x4b\xaa\xd7\xb2\xd9\x54\x86\x01\xfc\xba\xd1\x9e\x27\xe5\x82\x35\x7f\xd3\xfe\x18\xe1\xeb\xb0\x93\xf2\x37\x2d\xc2\x9b\x16\xd9\x9b\xf6\x18\x1b\x78\xcd\x93\x74\x41\x32\x3a\xac\xa4\x70\xe7\x1c\xeb\xe8\xd1\x57\x7d\x10\xf3\x27\x1d\x6b\x4c\xe0\xec\x2b\xb5\x0b\xdd\x7b\x00\xd8\xcf\x7a\x76\x0e\x54\x8a\x21\x9c\xfd\xa9\x0c\x16\xcf\x60\x54\xb3\xf9\x4f\xb0\x37\x7a\x42\x7d\x51\x6f\xff\x9f\x3a\x20\x66\x0b\x4e\x72\x76\x06\x54\x89\x19\x9c\xfd\x5e\x95\xdc\x0c\x4e\x72\x76\x06\x54\x89\x19\xc8\xee\x14\x75\x5c\x6f\x16\x7e\x27\xa8\x40\xf4\x05\x93\x80\x9d\xf4\x81\x6f\x92\x97\x54\xc1\x76\xc8\x5c\x67\xbc\xc4\x1d\x71\xb2\x5d\xd6\x01\xbc\x2a\xe9\xfe\xe4\xf3\x1f\xac\xad\x9b\xd4\xe6\xed\x75\xdd\x73\xa6\xd1\xcf\xb6\xa6\x3a\xf1\xa9\x6e\x12\x77\xe8\x1b\x90\x62\x01\x41\x8b\x0b\xac\x15\x7e\xad\xf6\x22\x0b\x78\x8e\x68\x7f\xb2\xd9\x64\xf5\x38\x7c\x54\x59\xc4\x8b\xaa\x60\x9f\x5b\x65\xad\x86\xcb\x3f\xeb\xfc\x22\x36\x11\x2d\x80\x94\x9c\xd5\x71\x1b\x30\xca\x2c\x64\xee\x34\xfc\x7f\x46\x67\xad\x38\x7d\x10\x59\xc0\x4a\xa2\x57\x63\x52\x72\xd6\xe8\x70\xfa\x49\xe6\x21\xf0\xb3\xbc\x42\x9f\xe5\x4f\x56\x26\x3d\x9e\xee\xfd\xd5\xcf\x5f\x01\x00\x00\xff\xff\x57\xd3\x43\x59\x3d\x10\x00\x00")

func locales_en_json_bytes() ([]byte, error) {
	return bindata_read(
		_locales_en_json,
		"locales/en.json",
	)
}

func locales_en_json() (*asset, error) {
	bytes, err := locales_en_json_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "locales/en.json", size: 4157, mode: os.FileMode(420), modTime: time.Unix(1426157280, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _locales_fr_json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x97\xcf\x4e\x1b\x49\x10\xc6\xef\x3c\x45\xcb\x97\xbd\xb0\x68\x57\xda\xbd\x70\xf3\xae\xe1\x60\x85\x20\xc5\x08\x14\x45\xd1\xa8\x3d\x53\xd8\x1d\x7a\xba\x27\xfd\x67\x08\x20\x1e\x20\x6f\x91\x63\x78\x0e\xbf\x58\xaa\x67\xec\xc4\x21\xfe\xda\x13\x0e\x08\x7b\xaa\xbe\x5f\xd5\x54\xf5\xd4\x94\xdf\x1d\x08\xf1\xc0\x7f\x42\x8c\x54\x35\x3a\x16\x23\x59\x06\xd5\xaa\xa0\xc8\x8f\x0e\xfb\xeb\xc1\x49\xe3\xb5\x0c\xca\x9a\xe4\x30\xee\x1d\x56\x4f\x7e\xc4\xf6\xc7\xc3\x5f\x00\x55\xe5\xc8\x43\x75\x6f\xa5\xdd\xda\xb9\x2c\x6f\x8a\x60\x0b\x6a\xc9\x04\x84\x78\x43\xc1\x46\xe7\x85\x8c\x9f\xc4\xea\xa9\x5d\x7d\x35\x54\x77\xee\x59\x64\x63\xfd\x20\x22\xdf\x7f\x94\x3a\x73\x7f\xa5\x35\x81\x9d\x00\xea\xff\xb5\x15\x48\x5b\x72\x40\xa8\x6a\xb9\x20\xd1\x38\x65\x4a\xd5\x48\x0d\x0a\x54\xc9\x40\x45\x50\x35\xf9\x42\x99\x40\xae\x95\x1a\xf0\x1e\x1e\x8e\x66\x41\xba\x30\x61\xc5\xe3\xa3\xa8\x48\x6c\xae\x5c\xb0\x9c\xaf\xac\xbe\xa4\x2b\x27\xa6\xea\xbf\xe3\x78\x7b\x43\x4d\xa2\xd8\x8e\xb6\xe6\xcb\xb8\xe6\xff\xb8\xb6\x3b\x06\xd5\x52\x21\xf4\x49\x67\x03\xb2\x26\xdc\x15\x5e\x71\x41\x8c\xac\x09\x00\x2e\x6d\x70\x24\x92\xd7\x5e\x4a\x90\x0b\xad\x0c\x02\xfd\xa7\xc8\xf0\xa9\x8c\x0c\x8b\x4e\xb4\x1d\xd6\xd8\xd8\x12\xdf\x67\x92\x8b\x5b\x9a\x1f\x89\x4b\x8a\x4a\x6b\xba\x17\xf2\x83\x8d\x5c\x34\x11\x0d\x71\xed\x7d\xe9\x54\x93\x48\xa9\x0f\xed\xf7\x94\x44\xc5\x21\x84\xfe\x43\x56\xb5\x32\xca\x73\xc4\xe4\x73\x04\x32\xcd\x3d\x13\xab\xcf\xfb\x9e\x83\x4e\x5e\x5c\x5b\x57\xcb\x50\xa4\xb6\xa6\x53\x84\xcf\xce\x15\xd1\x4d\x25\xef\xb8\x8f\xfc\x65\xb2\xf9\x70\xc6\xa7\x7b\xd9\x7f\xcc\x76\xf4\x79\xac\x17\xc6\xd9\x4d\x5f\x73\x33\xf9\xff\xfd\xef\xf1\x5f\xff\x20\xb1\xd6\xf6\xb6\x88\xa8\x90\xb3\xa8\x5a\xba\xff\x93\x3b\xeb\xbb\x46\x6b\xf2\xc2\xf1\x2c\xa0\x34\x1b\xbc\x2d\x15\xff\xdf\x4d\xd6\x76\x61\x01\xb4\x33\xed\x14\xd5\x54\xcf\xc9\xe1\xae\x7e\x8c\xaa\x01\x27\xb7\x4e\x35\x2a\xa6\xd2\x44\xe9\xee\x00\x80\xad\xad\xe2\x91\x93\x01\xf8\xa5\x75\x21\x61\x30\x22\x27\x3f\xa5\xb9\xc3\xf1\x4f\xa9\x75\x83\xe2\x33\x06\x23\x72\xf2\x33\xe9\xca\x25\x90\xb2\x0d\x3c\x0c\xdb\xa1\xd9\x0b\xeb\x73\xf2\x31\x0f\x6b\x34\xb7\xc6\xad\x43\x73\x6b\x3b\x36\x23\x30\x20\x7f\xdb\xa8\xe4\x67\x52\x0d\xb9\xe7\x17\xca\xa7\x11\x0e\xc8\x69\x54\xd9\x93\xb2\x3e\x68\x11\x1e\xb4\xb8\x27\xb2\x86\xa7\xbc\x9b\xb9\xe0\x9d\xfb\x73\x70\xd4\xaf\x84\xc8\xf6\x3a\x2e\xa2\x47\xef\xfc\x31\x8f\xfa\x01\xbd\x8e\x0b\xac\xcf\xc9\x67\xd4\x84\x6e\x4c\xa0\x91\xd5\xdb\x5d\x76\x4e\xf4\x39\xb0\x2b\x86\xe4\xe4\xe7\x65\xb0\x38\x83\xce\x3a\x24\xfe\x39\xdc\x9b\xce\xd1\xce\xd4\xcb\x5f\xf3\xe6\x94\x29\x41\x6f\x1e\x92\x01\x7b\x62\x46\x4e\x3e\xa1\x32\x97\xc1\x64\xf5\x54\x0e\x4c\x81\x49\x19\x08\xd2\x3b\xe2\x35\xec\xda\xa2\x57\xc5\x89\x11\x5e\xb6\x56\x39\xd1\xe8\x08\xa6\x5e\x23\x7d\xc8\xaf\xd6\xdb\x6b\x84\x60\x77\x0f\xb7\xe0\xdc\x3a\x3d\xde\xb7\x42\x27\xf1\xb0\xf5\x60\xd7\xe6\xf1\x96\xa4\x43\xbb\x41\xb0\x76\xa1\xd3\x42\xd8\xaa\x45\xcf\x01\x63\x8e\x37\xb9\xdd\x84\xdb\x7e\x21\x29\x38\x60\x05\xa7\xe4\xab\x68\x2a\x30\xad\x36\xfa\xf5\xa0\x85\x19\x30\x22\x0f\xb8\x88\xe4\x71\x06\xfc\x6e\x1a\x96\x01\x63\x7e\xf7\xf5\xb6\x01\x5c\x51\x65\xb2\x39\x90\x2b\x1d\x0d\x4b\x83\x59\x98\xb2\xa7\x10\x4b\xfe\x6d\x86\xb3\x98\x52\x1c\x58\x89\x65\xc4\x88\x3c\xe0\xd4\x29\x9c\xc0\x25\x99\x6a\x68\x19\x18\x84\x29\x79\xc0\x4c\x86\xe8\x70\x16\x33\xfe\x0d\x34\x2c\x07\x06\x61\xc6\x9e\x1c\x62\xe6\xa1\x98\xf0\x4f\x58\x53\x2e\xc1\x04\x7c\x96\x03\x5c\x03\x98\xd2\x01\x0e\xde\x7f\x0b\x00\x00\xff\xff\x3b\x56\xeb\x4b\x9b\x10\x00\x00")

func locales_fr_json_bytes() ([]byte, error) {
	return bindata_read(
		_locales_fr_json,
		"locales/fr.json",
	)
}

func locales_fr_json() (*asset, error) {
	bytes, err := locales_fr_json_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "locales/fr.json", size: 4251, mode: os.FileMode(420), modTime: time.Unix(1426157289, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en.json": locales_en_json,
	"locales/fr.json": locales_fr_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"locales": &_bintree_t{nil, map[string]*_bintree_t{
		"en.json": &_bintree_t{locales_en_json, map[string]*_bintree_t{
		}},
		"fr.json": &_bintree_t{locales_fr_json, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

