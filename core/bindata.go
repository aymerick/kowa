package core

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _locales_en_json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x57\x4f\x6b\xdb\x4e\x10\xbd\xe7\x53\x2c\x3e\x87\xf0\x83\x5f\x4f\xb9\xa5\x4d\x7c\x08\xb8\x31\x38\x10\x42\x29\x62\x2d\x8d\xa5\xc5\xd2\xae\xd9\x3f\x36\x26\xe4\xbb\x77\x56\x7f\x6c\x37\xd1\xcc\xaa\x39\xb4\xb1\xf5\xe6\xbd\x37\x9a\x59\xdb\x4f\xbf\xae\x84\x78\xc3\x7f\x42\xcc\x54\x31\xbb\x15\x33\x99\x7b\xb5\x57\x5e\x81\x9b\x5d\x77\xd7\xbd\x95\xda\xd5\xd2\x2b\xa3\x63\xc1\xdd\xb9\x00\xf1\xf7\xeb\x4f\x02\x45\x61\xc1\x91\xec\x1e\x1d\xa5\xae\x65\xbe\xcd\xbc\xc9\x60\x0f\xda\x53\x0a\xdf\xb1\x48\x78\x23\xfa\x22\x56\x68\x67\x5c\x52\xa7\xab\x19\x95\xc9\x8d\xf6\x38\x0f\x42\xe0\x47\x8f\x12\xd4\x3d\x58\x82\xd8\x61\xa3\xb4\x42\x7a\xc8\xbc\x6a\xc0\x65\x4a\x7b\xb0\x7b\x59\x13\x22\x6f\x6f\x37\x2b\x2f\xad\xbf\x47\xc6\xfb\xbb\xd8\x58\xd3\x88\xe1\xda\x33\x0a\xe0\x35\xbc\x39\xbc\xf2\xa0\x8b\xee\x3d\xed\x98\x34\x9b\x5f\xaa\x47\xc7\x8f\x0e\xe7\x6b\xe3\x2e\xd0\x48\x45\x89\x3f\xb4\x18\x41\xdb\xf9\x63\xe6\x14\x0e\x45\xcb\x06\x08\x81\x57\x13\xac\x88\x45\x49\x11\x2f\xcb\x5a\x69\x4a\xe7\x05\xea\xdc\x34\x10\xef\xea\x18\x25\x35\x1c\x5a\xd9\x1b\xb1\xac\x41\x3a\x04\xe4\x16\xff\x53\x5d\x49\x01\x2e\xb7\x6a\x0d\xe2\x50\x49\xdf\x11\x62\xb1\x50\x4e\xc8\xb5\x09\x5e\x28\x2d\x7c\x05\x42\x16\x8d\xd2\xca\xa1\x57\xf4\xb9\x21\x7a\xe4\x4e\xfc\x03\x73\xd2\x5b\x62\xb6\x31\xb6\x91\x3e\x8b\xbb\x8c\xed\xd1\x47\xe6\x05\x60\x5b\xc8\x23\xae\x0e\xdf\x2c\xf0\x00\x57\xdd\xcb\xfb\xe1\x1a\xbb\xc4\x8f\x5e\x5f\xf4\x19\x57\xef\x75\x99\xfe\xff\xbf\xfd\xef\xdb\x72\x41\xb1\xeb\xda\x1c\xb2\x40\xcd\x70\xde\xe2\x22\x38\x61\xb4\x70\x26\x57\xb2\xc6\xfd\xfa\x83\xb1\x5b\x62\xb2\xb5\x29\x0d\x21\xd6\x42\xa3\xa4\x06\x9a\x35\x58\xaa\x89\x45\x8f\x8e\x53\xe3\x94\xb2\x47\xa9\x83\xb4\x47\x42\x60\x40\x19\x01\x57\x19\xeb\xa3\x0c\x2d\xc1\xd1\xe7\xb0\xb6\xb4\xff\x80\x26\xfd\xb1\x90\x96\xe0\xe8\x0b\x69\xf3\x8a\x1a\x5f\x8b\x25\xbd\xb1\x8c\x16\xe0\xe8\x77\x3b\x4b\x7e\x49\x75\x58\xd2\x1b\xcb\x68\x01\xfe\xbe\xa9\x99\x47\x64\xc2\x3d\x7f\x91\xfe\x18\xc8\xaf\xc3\x16\x4a\x9f\xb4\x40\x9e\xb4\xc0\x9e\xb4\xc7\x50\x93\xc7\x3c\x42\x13\x9c\xa9\x65\x45\x84\xdb\x73\x28\x83\xa3\x7e\xd5\x7b\x30\xbd\xe9\x50\xd2\x0a\x1c\x7d\x05\x3b\xdf\x7e\x0f\x10\xf4\x33\x9e\xec\x01\x4b\x69\x11\x8e\xfe\x94\x7b\x43\x77\x30\xa0\x49\xff\x27\x32\x1b\x3d\x51\xb9\xa8\xa3\xff\xc4\x04\xc4\x8c\xe0\x04\x27\x3b\xc0\x4a\x5a\x83\xa3\xdf\x43\xce\x75\x70\x82\x93\x1d\x60\x25\xad\x41\xd1\x2d\x60\xe2\xda\x18\xf2\x77\x02\x0b\x44\x57\x30\x2a\xb0\x93\xce\xf3\x21\x79\x89\x15\x6c\x42\xe6\x92\xf1\x92\x4e\xc4\x91\x36\x2d\x01\xbc\x82\xb4\xff\xf2\xf3\xef\x54\xa9\xc3\x2e\x6b\x83\x22\x0e\x07\xb3\x28\x5e\x1f\x57\x7f\xae\x30\x63\xb5\x85\xa2\x7f\xd8\x88\xa1\xab\xe7\x10\x01\xeb\x2f\x79\x6d\x7c\x26\xf7\xf8\x4a\xae\x6b\xea\x16\x2e\x4c\x62\xa2\xab\x2d\xc8\xe2\x28\x2c\x94\x18\xe5\xc0\x42\xc2\x07\x37\xe4\x30\x5b\x14\xf8\x10\x62\xb2\x03\xc8\x2d\x17\x5d\x87\xe2\x68\x84\xf5\x22\xd6\x5f\x8b\x5d\x97\x39\x21\x26\x73\x81\x09\x33\xbe\xf5\xa2\x02\x55\x56\x5e\xe4\x95\xb4\xf8\xec\x81\x61\x82\xef\x23\x38\xb0\x31\x39\x27\x26\xda\xb6\x31\xd4\x5e\x0c\xf3\xd4\x45\x5e\x19\x83\x7f\xe4\xb9\xc8\xc7\xd4\xdb\x3e\x20\x29\x1d\x43\x55\x7d\xc4\x0e\x7d\xec\x48\x48\x5d\x08\x1d\xda\xa8\x33\xb1\xbb\xc9\x0b\xb9\xec\xf1\xf3\x4e\x3e\xb5\x8b\xba\x15\x4e\xcf\x68\x98\xd8\x48\x5c\x57\xfb\xb9\x9e\x3a\xa8\xb8\xaf\x96\x30\x79\x54\xa7\x55\x6e\xa2\x56\x72\x91\x68\x50\xd6\xf1\xf1\x67\xaf\xca\xae\x0d\x62\x3c\xa6\xc4\x3a\x71\x51\x37\x2a\x77\xe8\x82\x79\xb6\x20\x85\x16\x13\xa8\x05\x1d\x37\x3a\x90\x15\x78\x0e\xd4\x8e\x93\xde\x48\x75\xb4\xf9\x80\xb2\x12\x2f\x40\x7d\x0a\x22\x92\xa2\x6a\xce\xff\x8c\xf3\x37\x51\x05\xf2\x8c\x87\x24\xd5\x72\x03\x18\x60\x56\x64\x6e\x15\xf9\x9c\xaf\x92\x54\xda\xbd\x07\x59\x81\x95\xa4\x3e\x5a\x11\x49\x51\x83\xa5\xdd\x4f\x30\x2f\x42\xc6\xd5\x15\x15\x57\x2f\xa8\x8c\x7b\x38\x9d\xfb\xab\xdf\x7f\x02\x00\x00\xff\xff\x73\x35\x53\x4b\x55\x13\x00\x00")

func locales_en_json_bytes() ([]byte, error) {
	return bindata_read(
		_locales_en_json,
		"locales/en.json",
	)
}

func locales_en_json() (*asset, error) {
	bytes, err := locales_en_json_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "locales/en.json", size: 4949, mode: os.FileMode(420), modTime: time.Unix(1427977227, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _locales_fr_json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x57\x4d\x6e\xe3\x46\x13\xdd\xcf\x29\x1a\xda\xcc\xc6\x9f\xf1\x05\x48\x36\xb3\x53\x22\x7b\x61\xc4\x31\x10\x0d\x3c\x08\x82\x80\x68\x91\x25\xa9\xc6\x64\x37\xdd\x3f\x54\x3c\x86\x0f\x90\x5b\x64\x39\x3e\x87\x2e\x96\xd7\xa4\x34\x91\x1d\x55\x8b\x33\x0b\xc3\x14\xbb\xde\xab\xc7\xaa\xee\xe2\xe3\xef\x6f\x94\x7a\xc4\x9f\x52\x13\xae\x26\xef\xd4\x44\x97\x81\x3b\x0e\x4c\x7e\x72\x36\xdc\x0f\x4e\x1b\x5f\xeb\xc0\xd6\xa4\x80\xe9\x10\xb0\x7d\xf6\x13\xac\x3f\x9d\xfd\x87\xa0\xaa\x1c\x79\x11\x3d\xac\xd2\x71\xec\x42\x97\x77\x45\xb0\x05\x75\x64\x82\x44\xf1\x2b\x05\x1b\x9d\x57\x3a\xfe\xa9\xb6\xcf\xdd\xf6\xb3\xa1\xa6\x0f\xcf\x52\xb6\xd6\x8f\x62\xc4\xf3\x47\x5d\x67\x9e\xaf\xb4\x26\x20\x48\xa0\xfa\x69\xb7\x2a\x40\x3b\x72\x02\x90\x1b\xbd\x22\xd5\x3a\x36\x25\xb7\xba\x16\x0a\x54\xe9\x40\x45\xe0\x86\x7c\xc1\x26\x90\xeb\x74\x2d\xf0\x3d\x3e\x9e\xcf\x83\x76\x61\x06\xc4\xd3\x93\xaa\x48\xed\xef\xbc\x07\x1c\x77\xb6\x7f\xa7\x3b\x17\xa6\x1a\x7e\xcb\xf9\x4e\xa6\x9a\x45\x75\x98\x6d\xc7\xaf\xe3\x8e\xff\xdf\x7b\xc7\x73\x50\xa3\x59\xa2\xbe\xe8\xd7\x04\x58\x1b\x1e\x0a\xcf\x28\x88\xd1\x0d\x09\x04\xb7\x36\x38\x52\x29\xea\x24\x4b\xd0\xab\x9a\x8d\x44\xf4\x23\x93\xc1\xae\x8c\x20\x8b\x4e\x75\x3d\xad\xb1\xb1\x23\x3c\x67\x82\xab\x0d\x2d\xce\xd5\x2d\x45\xae\x6b\xfa\xa4\xf4\x47\x1b\x51\x34\x15\x0d\xa1\xf6\xbe\x74\xdc\x26\xa6\xd4\x87\xee\x8b\x24\x55\x21\x85\xaa\xdf\xea\xaa\x61\xc3\x1e\x19\x53\xcc\xb9\xa0\x34\x77\x26\xb6\x7f\x9d\x3a\x07\x3d\xbc\x58\x5a\xd7\xe8\x50\xa4\xb6\xa6\x5d\x24\xef\x9d\x0f\x44\x77\x95\x7e\x40\x1f\xf1\x63\xb6\xbf\xb8\xc6\xee\x5e\x0f\x97\xd9\x8e\xbe\xce\xf5\x8d\x79\x8e\xb3\xef\x78\x33\xfa\xbf\xfb\xe1\xdd\xff\xbf\x97\xc0\x75\x6d\x37\x45\x94\x0a\x39\x8f\xdc\xd1\xa7\xff\xa1\xb3\xbe\x6f\x74\x4d\x5e\x39\xcc\x02\x4a\xb3\xc1\xdb\x92\xf1\xff\x38\x73\x6d\x57\x56\x20\xed\x97\x8e\x82\x1a\x6a\x16\xe4\xe4\xae\xde\x47\x6e\x85\x9d\xdb\xa4\x1a\x15\x57\xda\x44\xed\x1e\x04\x02\xac\x76\x8c\x91\x93\x21\xf0\x6b\xeb\x42\xa2\x91\x29\x72\xf0\x4b\x5a\x38\x39\xff\x25\x75\x6e\x54\x7e\xd0\xc8\x14\x39\xf8\xb5\x76\xe5\x5a\x80\x62\x4d\x38\x0c\x87\xa9\x11\x25\xe3\x73\xf0\x29\x86\xb5\x34\xb7\xa6\x9d\x93\xe6\xd6\x61\x6e\x50\xc8\x04\xf9\xc7\x96\x4a\x7e\xad\x79\xcc\x33\x7f\x23\xfc\x2a\x8a\x03\xf2\x2a\x72\x76\xa7\xec\x36\x5a\x14\x37\x5a\x3c\x91\xb9\x16\x77\x79\x3f\x73\x85\x77\xee\xcb\xe4\x52\xbf\x12\x45\xb6\xd7\x71\x15\xbd\xf4\xce\x9f\x62\xd4\x8f\xe8\x75\x5c\xc9\xf8\x1c\x7c\x4e\x6d\xe8\xc7\x84\x34\xb2\x86\x75\x97\x9d\x13\x83\x06\x84\xca\x24\x39\xf8\x4d\x19\xac\xac\xa0\x5f\x1d\x93\xff\x46\xf4\x4d\x37\x92\x67\x1a\xe0\xbf\xc0\x39\x65\x4a\x30\x2c\x8f\x51\x80\x48\x99\x23\x07\x9f\x51\x99\x53\x30\xdb\x3e\x97\x23\x25\x80\x29\x43\x22\xe1\x1d\xc1\x86\x2d\xad\xf4\xaa\xb8\x30\xca\xeb\xce\xb2\x53\x6d\x1d\x85\xa9\xd7\x6a\x1f\xf2\xd6\xfa\xd0\x46\x28\x84\x7b\xd1\x05\xe7\xec\xf4\xf4\x94\x85\x4e\xe0\x71\xf6\xe0\x98\xf3\xf8\x8d\xb4\x93\xbc\x81\xe7\x95\x89\x6d\xd1\x5b\x4a\xd4\x0b\x9e\x15\xf7\x05\xa7\x4e\x41\xf5\x71\x8a\x7c\x50\xbb\x58\x12\xcc\xd7\x0b\x5e\x63\x43\xa1\x3b\x5c\xe9\x45\x2d\x69\x7f\xc9\x5e\x6d\x9f\x3f\xc2\x6f\xc7\xc0\x35\xa3\xa6\xf9\x24\xa9\xee\x1b\xeb\x2a\x7c\xb5\xd8\x62\x43\xfa\x2e\x6b\x6d\x1b\x1b\x92\xa9\x4c\x20\xea\x73\x05\x67\x5b\xb5\xd4\x0c\x6d\x67\xaa\xdb\xfb\x51\x74\xd4\xc1\x8e\xc2\xac\x36\x96\x61\x3a\xd7\x91\x83\x2a\xb5\xc3\xb7\xca\xf6\x33\xbe\xc8\xf2\x92\xa2\x27\x97\x4c\xf6\x89\x92\x0e\x8a\x50\x45\x13\x78\xc9\xda\x84\xc3\xd2\x1e\x88\x31\x6f\x87\x4a\x40\xd0\x3d\x0c\x35\x66\x37\x70\x5e\x51\x7a\x12\xaf\xca\x35\x2f\x97\xe3\x25\x8d\xed\xc6\x6b\x59\xaf\x7a\xf2\x45\x1e\x4a\x05\x09\x96\x3d\x27\xf7\x8e\x8a\x41\xdb\x48\x29\xa9\x61\xfd\x19\xff\xaa\xfa\xf4\x0d\x2b\xf1\x01\x1a\x32\xfd\xba\x8f\x3a\x61\x4f\x77\x0c\x1a\x56\x75\xfa\x24\xea\x78\x35\x24\x16\x5e\xf4\xf8\x96\x39\xce\xb0\x19\x2c\x79\x81\x23\x57\x89\x3e\xe1\xe7\x68\x2a\xe1\x7d\xbd\xc7\xef\xac\x86\xa8\x00\x14\x79\x82\xf7\x91\xbc\xac\x00\xee\x6c\x9c\x02\xd0\x7c\xad\xc1\xdb\x13\x7c\xa0\xca\x64\x35\x90\x2b\x1d\x8d\x93\x01\x2e\x99\xe5\x44\x21\xd6\xd1\x65\x54\x5c\x51\x1c\x59\x89\x75\x94\x29\xf2\x04\x97\x8e\x65\x01\xb7\x64\xaa\xb1\x65\x00\x91\xcc\x92\x27\x98\xeb\x10\x9d\xac\x62\x8e\x23\x38\x4e\x03\x88\x64\x8e\x13\x1a\x62\xe6\x50\xcc\xb8\xd1\xa6\x5c\x0b\x1e\xe0\x95\x06\xd1\x08\x83\xa5\x27\x78\xf3\xc7\x3f\x01\x00\x00\xff\xff\x84\xa7\x7d\x63\x9d\x13\x00\x00")

func locales_fr_json_bytes() ([]byte, error) {
	return bindata_read(
		_locales_fr_json,
		"locales/fr.json",
	)
}

func locales_fr_json() (*asset, error) {
	bytes, err := locales_fr_json_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "locales/fr.json", size: 5021, mode: os.FileMode(420), modTime: time.Unix(1427977420, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en.json": locales_en_json,
	"locales/fr.json": locales_fr_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"locales": &_bintree_t{nil, map[string]*_bintree_t{
		"en.json": &_bintree_t{locales_en_json, map[string]*_bintree_t{
		}},
		"fr.json": &_bintree_t{locales_fr_json, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

