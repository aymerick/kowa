package core

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _locales_en_json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x58\xcd\x4e\xe3\x48\x10\xbe\xcf\x53\x94\x38\xa3\x68\xa5\xdd\x13\x37\x76\x80\x03\xda\x0c\x48\x20\xa1\xd1\x6a\x65\x75\xec\xc2\xee\x89\xd3\x1d\xf5\x4f\xa2\x08\xf1\xee\x5b\xd5\xb6\x93\xcc\xe0\x6a\x9b\x39\x00\x89\xbf\x9f\x2a\x77\x97\xdb\x55\xfc\xfb\x05\xe0\x8d\x7e\x00\x2e\x74\x75\x71\x05\x17\xaa\x0c\x7a\xa7\x83\x46\x7f\x71\xd9\x5d\x0f\x4e\x19\xdf\xaa\xa0\xad\x61\xc2\xf5\x89\x40\xf8\xfb\xe5\x07\x83\xaa\x72\xe8\x45\x75\x8f\x8e\x4a\x57\xaa\x5c\x17\xc1\x16\xb8\x43\x13\x24\x87\xbf\x89\x04\xc1\x42\x4f\xca\x1a\x6d\xad\x9f\xf4\xe9\x38\xa3\x36\xa5\x35\x81\xd6\x43\x30\xf8\xda\xa3\x82\x74\x87\x4e\x10\x76\xd8\xa8\xac\x52\x01\x8b\xa0\x37\xe8\x0b\x6d\x02\xba\x9d\x6a\x05\x93\xb7\xb7\xc5\x53\x50\x2e\xdc\x90\xe2\xfd\x1d\x5e\x9d\xdd\xc0\x70\xed\x99\x0c\xe8\x1a\xdd\x1c\x5d\xb9\x35\x55\xf7\x5d\x8e\x38\x19\xec\xee\xdc\x9d\x23\xfe\x1a\xe1\x74\x6d\x3c\x0a\x6e\x94\x96\xcc\x6f\x13\x26\xc8\xb6\xe1\x50\x78\x4d\x8b\x62\xd4\x06\x05\x83\xef\x36\x3a\x60\xd2\xa4\x49\x50\x75\xab\x8d\xe4\xf3\x82\x6d\x69\x37\xc8\x77\x75\x60\x4b\x83\xfb\x64\xbb\x80\xc7\x16\x95\x27\x40\xad\xe9\x97\xee\x28\x15\xfa\xd2\xe9\x15\xc2\xbe\x51\xa1\x13\x30\x19\xb4\x07\xb5\xb2\x31\x80\x36\x10\x1a\x04\x55\x6d\xb4\xd1\x9e\x62\x71\x9c\x85\x90\x63\xae\xe2\x6f\x33\x95\x9e\x84\xc5\xab\x75\x1b\x15\x0a\xde\x4b\x4e\x4f\x2e\x99\x17\xc4\x75\xa5\x0e\xb4\x75\xf4\x65\x49\x05\xdc\x74\x1f\x6f\x86\x6b\xd9\x4d\xfc\x35\xd6\x6f\xc6\x19\x77\xef\x7d\x33\xf9\xff\x79\xf5\xc7\x5f\x8f\x4b\x49\xdd\xb6\x76\x5f\x44\x69\x0d\xef\x12\x0e\xd1\x83\x35\xe0\x6d\xa9\x55\x4b\xfb\x1b\xf6\xd6\xad\x85\x95\x6d\x6d\x6d\x05\xb3\x04\x8d\x8a\x36\xb8\x59\xa1\x93\x92\x58\xf6\xe8\xb8\x94\x57\xa9\xb8\x57\x26\x2a\x77\x10\x0c\x06\x34\x63\xe0\x1b\xeb\x02\xdb\xc8\x16\x39\xf9\x1d\xae\x9c\x1c\x7f\x40\x27\xe3\x13\x51\xb6\xc8\xc9\x97\xca\x95\x8d\xb4\x7c\x09\x9b\x8c\x4d\x34\xd9\x20\x27\xbf\xde\x3a\xf1\x90\xea\xb0\xc9\xd8\x44\x93\x0d\xf2\xf7\x2d\xad\x39\x23\x33\xee\xf9\x37\xe5\xf7\x51\x3c\x0e\x13\x34\x5d\x69\x51\xac\xb4\x98\xad\xb4\xfb\xd8\x8a\x65\xce\xd0\x8c\xc8\xd2\x66\x31\x92\xdb\xe7\x58\x47\x2f\xbd\xd5\x7b\x70\x7a\xa7\x63\x2d\x3b\xe4\xe4\x4f\xb8\x0d\xe9\x1c\x10\xe4\x27\x7c\x32\x07\xa2\xca\x26\x39\xf9\x43\x19\xac\x9c\xc1\x80\x4e\xc6\x7f\x10\x7b\xa3\x07\xa9\x2f\xea\xe4\xdf\xa8\x03\xca\x2c\xc1\x11\x9e\xcc\x80\x98\xb2\x47\x4e\x7e\x83\x65\x2e\x83\x23\x3c\x99\x01\x31\x65\x0f\x49\xee\x90\x3a\xae\x57\x2b\xbe\x27\x88\x00\x1d\x61\xd4\x60\xab\x7c\xc8\x37\xc9\x8f\xc4\xc8\x76\xc8\xb9\xce\xf8\x51\xee\x88\x59\x36\xaf\x03\xf8\x8e\xca\x7d\xe6\xf5\xef\x75\x6d\xe2\xb6\x48\x8d\x62\x91\x86\x10\x6e\x85\x55\x59\xda\x68\xc4\x67\xb5\xa7\xc1\x40\xfb\x84\x33\x37\x6c\x73\xed\x53\x83\x79\xdd\x71\xaf\xe8\x3e\x60\xd1\x43\x44\xfc\x47\x9b\x35\xcc\xba\xa9\xb2\xd5\x34\x95\xac\x62\x08\x56\x3a\x32\xbf\x32\x25\x75\x8d\x1d\x0d\x56\xc8\x5d\x0b\x75\x9b\x43\xde\x5d\xa3\xd9\xe7\x2d\x34\x93\x3f\x45\xd5\x86\xda\x7a\xba\x3e\x1e\xf0\xb9\xa1\x76\x35\x11\xa1\x9f\xdb\xb8\x7f\xed\x35\x73\xec\x8d\x0d\x85\xda\xd1\x27\xb5\x6a\xa5\x6a\x38\x0b\xc2\xcd\x71\xeb\x50\x55\x07\x70\x58\x53\x57\x8c\x0e\x67\xc5\xb1\x06\x8b\xf4\xdc\x90\x44\x3a\xf4\xee\xe9\xe0\xa6\xf6\x0e\x81\x89\xc0\xc4\xc5\x62\x8e\xb7\x8f\xab\x1f\x28\x1e\x65\xd7\x3f\xad\x3c\x0f\x41\x34\x29\xe9\x12\xbf\xa9\x34\x02\x7d\x62\x2b\x42\xa3\xcc\x5a\x7a\xe8\x9e\x13\x08\xf4\x6c\xc1\x0f\x4b\x03\x83\xa9\x3f\xc4\xca\xc7\xa0\x43\xc1\x53\x3b\x5b\xd1\xdc\x6b\x8b\x3d\xaa\x75\x6e\x5a\x1a\xc8\xbc\x21\xc4\x07\xe6\x5f\xc2\xb6\x1b\x73\x90\x87\x41\xa0\xa1\x86\xbf\x06\x68\x50\xd7\x4d\x80\xb2\x51\x8e\xaa\x90\xfa\xd7\x7c\x1e\xd1\xa3\xe3\x61\x6d\xa2\xf2\x52\x1a\x03\xf7\xac\xe8\x8e\x59\x94\x8d\xb5\xf4\x47\x9d\x48\x81\x07\xad\x34\x93\x6b\xc3\x7d\x7c\x7b\xa0\x0c\x03\x67\x04\xca\x54\x60\x62\xea\xae\x67\x66\x37\xbb\x70\xcf\x73\xfc\x58\xbb\x1f\xd2\x25\xdf\x86\x56\x8f\xca\x70\x66\x22\xbc\x5d\xe9\x55\x32\x77\xa1\x78\xbf\x92\x60\xf6\x52\x1d\xb7\xf2\x95\xbd\x26\x37\x92\x02\xd4\x2d\x4f\xdc\x3b\x5d\x77\x69\x08\xcb\x63\x6b\xe2\xc1\x19\x6f\xd4\x6e\xdf\xcd\x82\xc5\x52\x34\x5a\xce\x90\x56\x72\x87\xdb\x81\x59\x83\xe7\x28\xed\xf1\x64\x6c\x92\x7a\x39\xf8\x80\x66\x2d\x5e\x50\x7a\x0a\x18\x99\x92\x9a\x5c\xfc\x13\x9e\xbf\x89\x26\x8a\x35\x1e\x27\xa5\x2e\xb7\x00\x03\x9c\x35\xb9\x73\x5a\xfc\xd7\x92\x9e\x94\xca\xd1\x7b\x30\x6b\xf0\xa4\xa4\x47\x8b\x91\x29\x69\x74\x72\xf4\x23\x9c\x37\x11\x27\xa4\x27\x69\x42\x3a\x93\x66\xa2\xc7\x63\xdd\x7f\xf9\xef\xff\x00\x00\x00\xff\xff\x68\x8a\x5c\x5d\xc8\x15\x00\x00")

func locales_en_json_bytes() ([]byte, error) {
	return bindata_read(
		_locales_en_json,
		"locales/en.json",
	)
}

func locales_en_json() (*asset, error) {
	bytes, err := locales_en_json_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "locales/en.json", size: 5576, mode: os.FileMode(420), modTime: time.Unix(1429186102, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _locales_fr_json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x57\xcd\x4e\x23\x47\x10\xbe\xef\x53\xb4\xb8\xec\x65\x63\x25\x52\x72\xe1\xe6\xac\xe1\x80\x96\x25\x0a\x2b\x56\x51\x14\x8d\xda\x33\x65\xbb\x60\xa6\x7b\xe8\x9f\x21\x80\x78\x80\xbc\x45\x8e\x4b\x5e\xc3\x2f\x96\xaf\x67\xcc\xc6\x10\x57\x7b\xd8\x03\x62\x3c\xdd\xf5\xd5\xd7\x55\xd5\x35\x5f\xfd\xfe\x46\xa9\x7b\xfc\x29\x75\xc0\xd5\xc1\xa1\x3a\xd0\x65\xe0\x8e\x03\x93\x3f\x78\x37\xbc\x0f\x4e\x1b\x5f\xeb\xc0\xd6\xa4\x0d\xd3\x61\xc3\xfa\xd1\x1f\x60\xfd\xe1\xdd\xff\x00\xaa\xca\x91\x17\xad\x87\x55\xda\x6d\x3b\xd7\xe5\x55\x11\x6c\x41\x1d\x99\x20\x41\xfc\x4a\xc1\x46\xe7\x95\x8e\x7f\xaa\xf5\x63\xb7\xfe\x62\xa8\xe9\xb7\x67\x21\x5b\xeb\x47\x21\xe2\xfc\x51\xd7\x99\xf3\x95\xd6\x04\x6c\x12\xa0\xde\x6f\x56\x05\xd3\x8e\x9c\x60\xc8\x8d\x5e\x92\x6a\x1d\x9b\x92\x5b\x5d\x0b\x01\xaa\x74\xa0\x22\x70\x43\xbe\x60\x13\xc8\x75\xba\x16\xf0\xee\xef\x27\xe7\x41\xbb\x30\x83\xc5\xc3\x83\xaa\x48\x3d\xbd\xf9\x04\x73\xbc\x59\xff\x9d\xde\x1c\x99\x6a\xf8\x2d\xfb\xdb\xeb\x6a\x16\xd5\xb6\xb7\x0d\xbe\x8e\x1b\xfc\xff\xde\xed\xf6\x41\x8d\x66\x09\xfa\xa8\x5f\x13\xcc\xda\x70\x5b\x78\x46\x40\x8c\x6e\x48\x00\xb8\xb0\xc1\x91\x4a\xbb\xf6\xa2\x04\xbd\xac\xd9\x48\x40\x3f\x33\x19\x54\x65\x04\x58\x74\xaa\xeb\x61\x8d\x8d\x1d\xe1\x9c\xc9\x5c\xdd\xd0\x7c\xa2\x2e\x28\x72\x5d\xd3\x9d\xd2\x97\x36\x22\x68\x2a\x1a\x42\xec\x7d\xe9\xb8\x4d\x48\x29\x0f\xdd\x57\x4a\xaa\x82\x0b\x55\xbf\xd5\x55\xc3\x86\x3d\x3c\xa6\x3d\x13\x81\x69\xee\x4e\xac\xff\xda\x77\x0f\x7a\xf3\x62\x61\x5d\xa3\x43\x91\xd2\x9a\xaa\x48\xae\x9d\xcf\x44\x57\x95\xbe\x45\x1e\xf1\x63\xf6\xf4\x70\x8a\xea\x5e\x0d\x8f\xd9\x8c\xbe\xf4\xf5\x8d\x7e\x76\xa3\x6f\x70\x33\xfc\x7f\xf8\xe9\xf0\xfb\x1f\x25\xe3\xba\xb6\x37\x45\x94\x02\x79\x1e\xb9\xa3\xbb\xef\x90\x59\xdf\x27\xba\x26\xaf\x1c\x7a\x01\xa5\xde\xe0\x6d\xc9\xf8\xbf\x1b\xb9\xb6\x4b\x2b\x80\xf6\x4b\x3b\x8d\x1a\x6a\xe6\xe4\xe4\xac\x5e\x47\x6e\x85\xca\x6d\x52\x8c\x8a\x13\x6d\xa2\x76\xb7\x02\x00\x56\x3b\x46\xcb\xc9\x00\xf8\x95\x75\x21\xc1\xc8\x10\x39\xf3\x63\x9a\x3b\xd9\xff\x31\x75\x6e\x94\x7f\xc0\xc8\x10\x39\xf3\x53\xed\xca\x95\x60\x8a\x35\xe1\x32\x6c\xbb\xc6\x2e\xd9\x3e\x67\x3e\x45\xb3\x96\xfa\xd6\xb4\x73\x52\xdf\xda\xf6\x0d\x08\x19\x20\x7f\x6c\x29\xe4\xa7\x9a\xc7\x9c\xf9\x1b\xcd\x4f\xa2\xd8\x20\x4f\x22\x67\x2b\x65\x53\x68\x51\x2c\xb4\xb8\xc7\x73\x2d\x56\x79\xdf\x73\x85\x6f\xee\x73\xe7\x52\xbe\x12\x44\x36\xd7\x71\x19\xbd\xf4\xcd\x9f\xa2\xd5\x8f\xc8\x75\x5c\xca\xf6\x39\xf3\x73\x6a\x43\xdf\x26\xa4\x96\x35\xac\xbb\x6c\x9f\x18\x38\x60\xab\x0c\x92\x33\x3f\x2b\x83\x95\x19\xf4\xab\x63\xfc\x9f\x89\xba\xe9\x4c\xd2\x4c\x83\xf9\x47\x28\xa7\x4c\x08\x86\xe5\x31\x0c\xb0\x53\xc6\xc8\x99\xcf\xa8\xcc\x31\x98\xad\x1f\xcb\x91\x14\x80\x94\x01\x91\xec\x1d\x41\x86\x2d\xac\xf4\xa9\x38\x32\xca\xeb\xce\xb2\x53\x6d\x1d\x85\xae\xd7\x6a\x1f\xf2\xd2\x7a\x5b\x46\x28\x6c\xf7\xa2\x0a\xce\xc9\xe9\xe9\x3e\x09\x9d\x8c\xc7\xc9\x83\x5d\xca\xe3\x37\xd2\x4e\xd2\x06\x9e\x97\x26\xb6\x45\x2f\x29\x8b\x7e\x94\x49\x82\x59\x97\xa5\x8d\x46\xbc\xbe\x69\x1b\xa5\x4f\xbd\x2a\x2d\xe4\xa0\x90\xc2\xdd\xd0\xb7\x18\x1c\x46\xe1\xdf\x6d\x74\xdf\xe0\xe2\x10\x07\x51\x93\xe9\x80\x82\x7d\x1f\xd8\x5c\xa9\x51\x87\x2a\x6b\xc6\x40\x33\x8f\x21\x58\xa9\x93\xbe\xaf\xf9\x3a\xc2\xe1\xa0\x5f\xd4\x1c\xed\x09\xca\xb3\x05\x53\xa5\x37\x67\xdd\xe6\x22\xe8\xcd\x67\x5e\xd9\x40\xfe\xe3\xbd\xe0\x90\x82\xea\xf7\x29\xf2\x41\x6d\xf6\x8e\xc2\x35\x36\x14\xba\xc3\x93\x9e\xd7\x52\x19\x3c\x47\xaf\xd6\x8f\x97\x18\x5d\x62\xe0\x9a\x51\x9e\x63\x9c\x58\x43\x45\x7f\x81\x7c\x10\xfb\xdf\x2f\xb8\x35\xea\x3a\xbe\x1d\xf4\xba\x33\xbc\xfe\x82\x00\xad\x1f\x83\x6e\x69\x32\x19\xe3\xc5\xc7\xf9\x25\x89\xfd\x6d\x57\x11\xf4\x53\x13\x06\x2b\x2e\xe9\xa3\x4e\x6a\x7a\x8c\x9b\xb0\xd2\xe6\x4a\xba\x79\xa7\xe4\x4a\x1e\x66\x0c\x1c\x67\xfd\x4f\xf2\xc5\x26\x4d\x1f\x61\x90\xb3\xaf\xf3\x98\x3a\xc0\x8d\x75\x15\xe6\x67\x5b\xdc\x90\xbe\xca\x0e\x59\x8d\x0d\xc9\x75\x32\xa2\x3e\x55\xc1\xd9\x56\x2d\x34\x23\xb5\xef\x54\xf7\x34\x19\xa1\xb7\x38\x54\x20\xc6\xa6\xc6\x82\x9b\x5a\x45\x0e\xaa\xd4\x0e\xa5\x99\x62\xee\xf3\x94\xa2\x47\x72\x40\x7d\x4f\x45\x0e\x8c\x50\x84\x26\xf0\x82\xb5\x09\xdb\x95\xb9\x45\xc6\xbc\x1d\x0a\x09\x84\x70\x65\x70\x5b\x02\xec\xbc\xa2\x74\x12\xaf\xca\x15\x2f\x16\xe3\x29\x8d\x2d\xe6\x97\xb4\x5e\x94\xf4\x57\x7a\x08\x15\x28\x58\xf6\x9c\xe6\x48\x44\x0c\xdc\x46\x52\x49\x09\xeb\xbf\x36\xaf\x8a\x4f\x9f\x30\xb4\x32\x17\x32\xf9\xba\x8e\xba\x2f\xe1\xbd\x19\x03\x87\x65\x9d\x86\xf3\x8e\x97\x83\x63\xa9\x68\x8d\xa0\x7f\x6e\x86\xe1\xb0\x40\xf3\xaf\x44\xc5\xfa\x21\x9a\x4a\x50\x8e\x4f\xf6\x1b\xd1\x2b\x32\x00\x44\x1e\xe0\x53\x24\x2f\x33\xc0\x9c\x30\x8e\x01\x60\x5e\x3b\x6a\x3c\x01\x7c\xa6\xca\x64\x39\xe0\xe6\x3b\x1a\x47\x03\x58\x32\xca\x9e\x40\xac\xa2\xcb\xb0\x38\xa1\x38\x32\x12\xab\x28\x43\xe4\x01\x8e\x1d\xcb\x04\x2e\xc8\x54\x63\xc3\x00\x20\x19\x25\x0f\x70\xae\x43\x74\x32\x8b\x73\x5c\xc1\x71\x1c\x00\x24\x63\xec\xe1\x10\x33\x97\x62\xc6\x8d\x36\xe5\x4a\x90\x32\x2f\x38\x88\x23\x19\x50\x7a\x80\x37\x7f\xfc\x1b\x00\x00\xff\xff\x40\x96\xc4\x6b\x27\x16\x00\x00")

func locales_fr_json_bytes() ([]byte, error) {
	return bindata_read(
		_locales_fr_json,
		"locales/fr.json",
	)
}

func locales_fr_json() (*asset, error) {
	bytes, err := locales_fr_json_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "locales/fr.json", size: 5671, mode: os.FileMode(420), modTime: time.Unix(1429187399, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en.json": locales_en_json,
	"locales/fr.json": locales_fr_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"locales": &_bintree_t{nil, map[string]*_bintree_t{
		"en.json": &_bintree_t{locales_en_json, map[string]*_bintree_t{
		}},
		"fr.json": &_bintree_t{locales_fr_json, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

