package core

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _locales_en_json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x58\x4d\x6f\xe3\x36\x10\xbd\xef\xaf\x20\x7c\x0e\x82\x02\xed\x69\x6f\xdb\x26\x3e\x04\xf0\xc6\x80\x03\x04\x8b\xa2\x10\xc6\xd2\x58\x62\x2d\x91\x06\x3f\x6c\x18\x41\xfe\x7b\x87\x94\x64\xbb\x1b\x0d\xa9\xcd\x21\x89\xcd\x37\xef\xcd\x70\x86\x96\x1f\xf3\xf7\x17\x21\xde\xe8\x47\x88\x85\xac\x16\x5f\xc5\x02\x4a\x27\x8f\xd2\x49\xb4\x8b\xbb\x7e\xdd\x19\x50\xb6\x05\x27\xb5\x0a\x01\xdf\xae\x01\x84\xbf\xdf\x7d\x10\xa8\x2a\x83\x96\x65\x0f\xe8\x24\x75\x0b\xe5\xbe\x70\xba\xc0\x23\x2a\xc7\x29\xfc\x49\x41\xc2\x69\x31\x04\x25\x85\x0e\xda\x66\x75\xfa\x98\x49\x99\x52\x2b\x47\xfd\x60\x04\xfe\x1a\x50\x86\x7a\x44\xc3\x10\x7b\x6c\x92\x56\x81\xc3\xc2\xc9\x0e\x6d\x21\x95\x43\x73\x84\x96\x11\x79\x7b\xbb\xdf\x38\x30\xee\x81\x18\xef\xef\x62\x67\x74\x27\xc6\xb5\x17\x12\xa0\x35\xda\x1c\xad\x3c\xaa\xaa\x7f\xcf\x67\xcc\x26\x5b\xde\xaa\x87\x8c\x3f\x67\xb8\xae\x4d\x67\xc1\x0e\x24\x27\xfe\x18\x31\x86\x76\x70\xe7\xc2\x4a\x6a\x8a\x82\x0e\x19\x81\x1f\xda\x1b\x11\x82\xb2\x22\x0e\xea\x56\x2a\x4e\xe7\x15\xdb\x52\x77\x18\x76\x75\x0e\x92\x0a\x4f\x51\xf6\x5e\xac\x5b\x04\x4b\x00\xec\xe9\x97\xec\x43\x2a\xb4\xa5\x91\x5b\x14\xa7\x06\x5c\x4f\x08\xc1\x42\x5a\x01\x5b\xed\x9d\x90\x4a\xb8\x06\x05\x54\x9d\x54\xd2\x52\xae\x90\xe7\x9e\xa9\x31\x75\xe2\x1f\x13\x27\x3d\x12\x8b\x9d\x36\x1d\xb8\x22\xcc\x32\x94\xc7\x1f\x99\x57\xc4\x7d\x05\x67\x1a\x1d\xbd\x59\xd1\x01\x6e\xfa\x97\x0f\xe3\x5a\x72\x88\x3f\xe7\xfa\x64\x9e\x69\xf5\x41\x37\x51\xff\xef\x5f\x7f\xfb\x63\xbd\xe2\xd8\x6d\xab\x4f\x85\xe7\x7a\xb8\x8c\xb8\xf0\x56\x68\x25\xac\x2e\x25\xb4\x34\x5f\x77\xd2\x66\xcf\x74\xb6\xd5\xb5\x66\xc4\x22\x34\x49\xea\xb0\xdb\xa2\xe1\x8a\x58\x0d\xe8\x34\x35\x74\xa9\x78\x02\xe5\xc1\x9c\x19\x81\x11\x4d\x08\xd8\x46\x1b\x17\x64\x78\x89\x14\x7d\x89\x5b\xc3\xe7\x1f\xd1\x6c\x7e\x0a\xe4\x25\x52\xf4\x15\x98\xb2\xe1\xda\x17\xb1\x6c\x6e\x0a\xe3\x05\x52\xf4\x6f\x07\xc3\x3e\xa4\x7a\x2c\x9b\x9b\xc2\x78\x81\xf4\xbe\xb9\x9e\x07\x64\xc6\x9e\x3f\x49\x7f\xf2\xec\xe3\x30\x42\xf9\x93\xe6\xd9\x93\xe6\x93\x27\xed\xc9\xb7\xec\x31\x0f\xd0\x8c\xcc\xdc\xb0\x02\x92\x9a\xb3\xaf\xbd\xe5\xbe\xd5\x07\x30\x3f\x69\x5f\xf3\x0a\x29\xfa\x06\x0f\x2e\x3e\x07\x18\xfa\x15\xcf\xd6\x40\xa1\xbc\x48\x8a\xfe\x5c\x3a\xcd\x57\x30\xa2\xd9\xfc\xcf\xac\x37\x7a\xe6\x7c\x51\x4f\xff\x4e\x0e\x28\xd1\x82\x0b\x9c\xad\x80\x22\x79\x8d\x14\xfd\x01\xcb\x54\x05\x17\x38\x5b\x01\x45\xf2\x1a\x1c\xdd\x20\x39\xae\x9d\x66\xbf\x27\x28\x40\xf4\x01\x93\x02\x07\xb0\x2e\x6d\x92\xd7\x14\x91\x74\xc8\x29\x67\xbc\xe6\x1d\x71\xa0\xcd\x73\x00\x3f\x10\xcc\xaf\x7c\xfd\x5b\x59\x2b\x7f\x28\xa2\x51\xa4\xe6\x90\x17\xa5\xf5\x69\xf5\x97\x86\x3c\x56\x0c\x14\xc3\x65\x23\x98\xae\x81\xc3\x18\xac\xff\xc9\x2b\xed\x0a\x38\xd2\x2b\xd8\xb6\xdc\x16\x6e\x92\x04\x47\xd7\x1a\x84\xea\x2c\x0c\xd6\x64\xe5\xd0\xe0\xac\x3c\xd6\x6f\xff\x45\xf6\x33\x12\x2f\x52\xd4\xc3\xde\x3b\x06\x77\x4d\x16\x5c\x96\xf8\x1d\xa2\xb7\x86\xb2\xd4\x5e\xb9\x74\x1e\x3a\x09\x96\x3c\x4c\x45\x97\x1d\x5d\x9c\x10\xf6\x29\x8b\x3c\x06\x87\x0d\x51\xbc\x08\xf1\x77\xe2\xd0\x7b\x5b\x0c\x37\x00\x41\x4e\x36\xbc\x75\xa2\x41\x59\x37\x4e\x94\x0d\x18\xba\xe3\x90\x69\x49\xd7\xe1\x2d\x9a\xe0\xd0\x33\x93\x8b\x65\x8c\xb1\x37\x43\xbb\x54\x51\x36\x5a\xd3\x1f\xb8\x06\xb9\xe0\xae\xe3\x45\x4c\xaa\x60\xde\xda\x33\x55\xe8\x42\x45\x02\x54\x25\x94\x8f\x96\x6a\x66\x75\xb3\x07\x7f\x5b\xe3\xc7\xd9\x7f\x28\x97\x74\x1b\xea\x9e\x56\x38\xb3\x90\x30\xae\xf8\xfc\x98\xdb\xa8\x30\xaf\x48\x98\xdd\xaa\xcb\x28\x77\x41\x2b\x3b\x48\x4a\x50\xb7\xe1\x9a\x75\x94\x75\x5f\x06\xd3\x1e\x5d\x53\x9c\xb8\x89\x9b\x94\x3b\xf5\x17\x80\x62\xc5\x0a\xad\x66\x50\x2b\xde\xd6\xf4\x60\x52\xe0\xc5\x73\x33\xce\xe6\x26\xaa\xe5\x93\x8f\x68\x52\xe2\x15\xb9\x4f\x41\x40\x72\x54\x95\xca\x7f\xc5\xd3\x9b\x68\x3c\x7b\xc6\x7d\x96\x6a\x52\x0d\x18\xe1\xa4\xc8\xd2\x48\xf6\xff\x09\x32\x4b\xe5\xb3\x0f\x60\x52\x60\x03\xdc\x47\x2b\x20\x39\xaa\x37\x7c\xf6\x0b\x9c\x16\x61\x6d\xf1\x86\xb3\xc5\x37\xd4\x44\x76\x7f\x39\xf7\x5f\xfe\xf9\x2f\x00\x00\xff\xff\x57\xed\x47\x9a\xbd\x13\x00\x00")

func locales_en_json_bytes() ([]byte, error) {
	return bindata_read(
		_locales_en_json,
		"locales/en.json",
	)
}

func locales_en_json() (*asset, error) {
	bytes, err := locales_en_json_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "locales/en.json", size: 5053, mode: os.FileMode(420), modTime: time.Unix(1428415705, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _locales_fr_json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x57\xcd\x6e\xe3\x36\x10\xbe\xef\x53\x10\xb9\xec\x25\x0d\x5a\xa0\xbd\xec\xcd\xad\x93\x43\xd0\x6c\x80\x7a\x91\x45\x51\x14\x02\x2d\x8d\xed\x49\x24\x52\xe1\x8f\xdc\x6c\x90\x07\xe8\x5b\xf4\xb8\x79\x0e\xbf\x58\x3f\x4a\xf6\xd6\x49\x3d\xb4\x76\x0f\x41\x64\x91\xdf\x37\x1f\x67\xc8\xd1\xc7\x3f\xde\x28\xf5\x88\x3f\xa5\x4e\xb8\x3a\x79\xa7\x4e\x74\x19\xb8\xe3\xc0\xe4\x4f\x4e\x87\xf7\xc1\x69\xe3\x6b\x1d\xd8\x9a\x34\x61\x32\x4c\xd8\x3c\xfb\x13\x8c\x3f\x9d\xfe\x8f\xa0\xaa\x1c\x79\x11\x3d\x8c\xd2\x61\xec\x5c\x97\x77\x45\xb0\x05\x75\x64\x82\x44\xf1\x1b\x05\x1b\x9d\x57\x3a\xfe\xa5\x36\xcf\xdd\xe6\xb3\xa1\xa6\x9f\x9e\xa5\x6c\xad\x1f\xc5\x88\xf5\x47\x5d\x67\xd6\x57\x5a\x13\x30\x49\xa0\xfa\x65\x3b\x2a\x40\x3b\x72\x02\x90\x1b\xbd\x24\xd5\x3a\x36\x25\xb7\xba\x16\x12\x54\xe9\x40\x45\xe0\x86\x7c\xc1\x26\x90\xeb\x74\x2d\xf0\x3d\x3e\x9e\xcd\x82\x76\x61\x0a\xc4\xd3\x93\xaa\x48\xed\xde\x7c\x00\x1c\x6f\x36\xff\xa4\x37\xe7\xa6\x1a\x7e\xcb\xf1\x8e\x86\x9a\x46\xb5\x1f\x6d\xcb\xaf\xe3\x96\xff\xbf\x77\x87\x63\x50\xa3\x59\xa2\x3e\xef\xc7\x04\x58\x1b\x1e\x0a\xcf\x48\x88\xd1\x0d\x09\x04\x37\x36\x38\x52\x69\xd6\x51\x96\xa0\x97\x35\x1b\x89\xe8\x67\x26\x83\x5d\x19\x41\x16\x9d\xea\x7a\x5a\x63\x63\x47\x58\x67\x82\xab\x35\xcd\xcf\xd4\x0d\x45\xae\x6b\xfa\xa4\xf4\xad\x8d\x48\x9a\x8a\x86\x90\x7b\x5f\x3a\x6e\x13\x53\xaa\x43\xf7\x45\x92\xaa\x10\x42\xd5\x6f\x75\xd5\xb0\x61\x8f\x88\x69\xce\x99\xa0\x34\x77\x26\x36\x7f\x1f\x3b\x07\x3d\xbc\x58\x58\xd7\xe8\x50\xa4\xb2\xa6\x5d\x24\xef\x9d\x8f\x44\x77\x95\x7e\x40\x1d\xf1\x63\xba\x7b\xb8\xc2\xee\x5e\x0d\x8f\xd9\x8a\xbe\x8e\xf5\x8d\x71\x0e\xb3\x6f\x79\x33\xfa\x7f\xf8\xe9\xdd\xf7\x3f\x4a\xe0\xba\xb6\xeb\x22\x4a\x89\x9c\x45\xee\xe8\xd3\x77\xa8\xac\xef\x0b\x5d\x93\x57\x0e\xbd\x80\x52\x6f\xf0\xb6\x64\xfc\x3f\xcc\x5c\xdb\xa5\x15\x48\xfb\xa1\x83\xa0\x86\x9a\x39\x39\xb9\xaa\xf7\x91\x5b\x61\xe7\x36\x29\x47\xc5\xa5\x36\x51\xbb\x07\x81\x00\xa3\x1d\xa3\xe5\x64\x08\xfc\xca\xba\x90\x68\x64\x8a\x1c\xfc\x82\xe6\x4e\x8e\x7f\x41\x9d\x1b\x15\x1f\x34\x32\x45\x0e\x7e\xa5\x5d\xb9\x12\xa0\x18\x13\x0e\xc3\x7e\x68\xcc\x92\xf1\x39\xf8\x04\xcd\x5a\xea\x5b\x93\xce\x49\x7d\x6b\x3f\x36\x28\x64\x82\xfc\xb2\xa5\x94\x5f\x69\x1e\xb3\xe6\x6f\x84\x5f\x46\xb1\x41\x5e\x46\xce\xee\x94\xed\x46\x8b\xe2\x46\x8b\x47\x22\xd7\xe2\x2e\xef\x7b\xae\xf0\xcd\x7d\x19\x5c\xaa\x57\xa2\xc8\xd6\x3a\x2e\xa3\x97\xbe\xf9\x13\xb4\xfa\x11\xb5\x8e\x4b\x19\x9f\x83\xcf\xa8\x0d\x7d\x9b\x90\x5a\xd6\x30\xee\xb2\x7d\x62\xd0\x80\xa9\x32\x49\x0e\x7e\x5d\x06\x2b\x2b\xe8\x47\xc7\xc4\xbf\x16\x7d\xd3\xb5\xe4\x99\x06\xf8\x7b\x38\xa7\x4c\x0a\x86\xe1\x31\x0a\x30\x53\xe6\xc8\xc1\xa7\x54\xe6\x14\x4c\x37\xcf\xe5\x48\x09\x60\xca\x90\x48\x78\x47\xb0\x61\x0b\x2b\x7d\x2a\xce\x8d\xf2\xba\xb3\xec\x54\x5b\x47\xa1\xeb\xb5\xda\x87\xbc\xb5\xde\xb7\x11\x0a\xd3\xbd\xe8\x82\x73\x76\x7a\x72\xcc\x42\x27\xf0\x38\x7b\x70\xc8\x79\xfc\x4e\xda\x49\xde\xc0\xf3\xd2\xc4\xb6\xe8\x2d\x25\xf2\x05\xcf\x8a\xf7\x82\x53\xa7\xa0\xfa\x79\x8a\x7c\x50\xdb\xb9\x24\x98\xaf\x17\xbc\xc6\x86\x42\x77\x78\xd2\xf3\x5a\xd2\xfe\x92\xbd\xda\x3c\xdf\xc2\x6f\xc7\xc0\x35\x23\xa7\x63\x82\xf8\x38\xbf\x25\xf1\xb8\xf4\x97\x30\xd8\xcc\xc1\x4b\x96\x16\x2e\x76\x30\xf8\xf0\xe9\x5c\xd2\x7b\x9d\xcc\x59\x3e\x4c\x2a\xef\xda\xba\x0a\x97\x23\x5b\xac\x49\xdf\x65\x1d\x74\x63\x43\xf2\xae\x09\x44\xfd\x92\x82\xb3\xad\x5a\x68\x46\x0a\x4e\x55\xb7\xb3\xbd\xd8\x38\x0e\xae\x17\x9e\xb8\xb1\x0c\x6f\xbb\x8a\x1c\x54\xa9\x1d\xae\x44\x9b\xcf\xb8\xf8\xe5\x25\x45\x4f\x2e\x79\xf9\x23\x95\x1b\x14\xa1\x58\x26\xf0\x82\xb5\x09\xfb\x15\xdc\x13\x63\xde\x0e\x09\x87\xa0\x7b\xf8\x76\x7c\x22\x80\xf3\x8a\xd2\x4a\xbc\x2a\x57\xbc\x58\x8c\x97\x34\xb6\xe8\xaf\x65\xbd\x2a\xfd\x17\x79\x48\x15\x24\x58\xf6\x9c\x2e\x09\xc8\x18\xb4\x8d\x94\x92\x0a\xd6\xb7\x92\xaf\xca\x4f\x5f\xb0\x12\xf7\xdc\x90\xa9\xd7\x7d\xd4\xfd\x86\x3a\x5a\x31\x68\x58\xd6\xe9\xe6\xd5\xf1\x72\x08\x2c\xf8\x09\x5c\x99\x0e\x33\xac\x07\xe7\x5f\xe0\x64\x57\xa2\x1d\xf9\x35\x9a\x4a\xb0\x05\x3b\xfc\xd6\xd1\x88\x0a\x40\x91\x27\xf8\x10\xc9\xcb\x0a\x60\x02\xc7\x29\x00\xcd\xd7\xfa\xc8\x1d\xc1\x47\xaa\x4c\x56\x03\xb9\xd2\xd1\x38\x19\xe0\x92\x59\x8e\x24\x62\x15\x5d\x46\xc5\x25\xc5\x91\x99\x58\x45\x99\x22\x4f\x70\xe1\x58\x16\x70\x43\xa6\x1a\x9b\x06\x10\xc9\x2c\x79\x82\x99\x0e\xd1\xc9\x2a\x66\x38\x82\xe3\x34\x80\x48\xe6\x38\xa2\x21\x66\x0e\xc5\x94\x1b\x6d\xca\x95\x60\x35\x5e\x69\x10\xfd\x36\x58\x7a\x82\x37\x7f\xfe\x1b\x00\x00\xff\xff\x9d\xa2\x73\xe1\x04\x14\x00\x00")

func locales_fr_json_bytes() ([]byte, error) {
	return bindata_read(
		_locales_fr_json,
		"locales/fr.json",
	)
}

func locales_fr_json() (*asset, error) {
	bytes, err := locales_fr_json_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "locales/fr.json", size: 5124, mode: os.FileMode(420), modTime: time.Unix(1428416049, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en.json": locales_en_json,
	"locales/fr.json": locales_fr_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"locales": &_bintree_t{nil, map[string]*_bintree_t{
		"en.json": &_bintree_t{locales_en_json, map[string]*_bintree_t{
		}},
		"fr.json": &_bintree_t{locales_fr_json, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

